function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %

    %ok, so we want something like, theta1 = theta1 - alpha*dJ/dtheta1
    bottomT1 = theta(1) + .01;
    topT1 = theta(1) - .01;
    bottomTheta = [bottomT1 theta(2)];
    topTheta = [topT1 theta(2)];
    bottomCost = computeCost(X, y, bottomTheta);
    topCost = computeCost(X, y, topTheta);
    dJdT1 = (topCost - bottomCost)/(topT1-bottomT1);
    
    bottomT2 = theta(2) + .1;
    topT2 = theta(2) - .1;
    bottomTheta = [theta(1) bottomT2];
    topTheta = [theta(1) topT2];
    bottomCost = computeCost(X, y, bottomTheta);
    topCost = computeCost(X, y, topTheta);
    dJdT2 = (topCost - bottomCost)/(topT2-bottomT2);

    theta(1) = theta(1) - alpha*dJdT1;
    theta(2) = theta(2) - alpha*dJdT2;
    

    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
